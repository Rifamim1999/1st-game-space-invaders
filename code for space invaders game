import pygame
import random
import math

from pygame import mixer     #mixer is a class within pygame

#initializing pygame
pygame.init()

#creating screen for the game
screen = pygame.display.set_mode((800, 600))

#titile and icon
pygame.display.set_caption("Space Invaders")
icon = pygame.image.load('ufo.png')
pygame.display.set_icon(icon)

#background
back_ground = pygame.image.load("space_background.png")

#background sound
mixer.music.load("background.wav")
mixer.music.play(-1)    # -1 is written into the parenthesis to create a loop

#player
player_img = pygame.image.load("spaceship (1).png")
playerX = 370
playerY = 480
playerX_change = 0

#enemy
enemy_img = []
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
numbers_of_enemies = 5

for i in range(numbers_of_enemies):
    enemy_img.append(pygame.image.load("ufo (1).png"))
    enemyX.append(random.randint(0, 736))
    enemyY.append(random.randint(50, 200))
    enemyX_change.append(3)
    enemyY_change.append(10)

#bullet
bullet_img = pygame.image.load("bullet.png")
bulletX = 0
bulletY = 480
bulletX_change = 0
bulletY_change = -8
bullet_state = "ready"   #ready - means the bullet won't see in the screen

#score
score_value = 0
font = pygame.font.Font("freesansbold.ttf", 32)

textX = 10
textY = 10

#game over
game_over_font = pygame.font.Font("freesansbold.ttf", 64)

#function for player to show in the game window
def player(x, y):
    screen.blit(player_img, (x, y))
    # blit() function means to draw a image in the game window. in here, we put the player_img variable in the game window

#function for enemy to show it in the game window
def enemy(x, y, i):
    screen.blit(enemy_img[i], (x,y))

#funtion for firing a bullet
def fire_bullet(x, y):
    global bullet_state
    bullet_state = "Fire"    #Fire - means the bullet will appear in the screen
    screen.blit(bullet_img, (x+25 , y+10))

#function for collision
def isCollision(enemyX, enemyY, bulletX, bulletY):
    distance = math.sqrt(math.pow((enemyX - bulletX), 2) + math.pow((enemyY - bulletY), 2))
    if distance <= 27:
        return True
    else:
        return False

#funtion for score
def show_score(x, y):
    score = font.render("Score: "+str(score_value), True, (255, 255, 255))
    screen.blit(score, (x, y))

#function for game over
def game_over_text():
    game_over = game_over_font.render("GAME OVER!!!", True, (255, 255, 255))
    screen.blit(game_over, (200, 250))


#game mode
running = True
while running:
    # setting the colour of the background
    # as the background colour will continously appear in game window so this code has to be in the infinite void loop
    # RGB = red, green, blue
    # red = 1 - 255
    # green = 1 - 255
    # blue = 1 - 255
     screen.fill((0, 0, 0))  # this means the screen will be black

#adding background image
     screen.blit(back_ground, (0, 0))

     for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
#check if the keystroke if pressed right or left
        if event.type == pygame.KEYDOWN:          #KEYDOWN is used to check if a button is pressed
            if event.key == pygame.K_LEFT:
                playerX_change = -5
            if event.key == pygame.K_RIGHT:
                playerX_change = 5
            if event.key == pygame.K_SPACE:
                if bullet_state is "ready":
                    bullet_sound = mixer.Sound("laser.wav")
                    bullet_sound.play()
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)

        if event.type == pygame.KEYUP:            #KEYUP means if the user removed her hand from button
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0

     playerX += playerX_change

# seting boundaries to our spaceship
     if playerX <=0:
         playerX = 0
     elif playerX >= 736:
         playerX = 736

#enemy movements
     for i in range(numbers_of_enemies):

         #losing signal
         if enemyY[i] >= 390:
             game_over_sound = mixer.Sound("game_over_sound.wav")
             game_over_sound.play()


         #game over
         if enemyY[i] >= 400:
             for j in range(numbers_of_enemies):
                 enemyY[j] = 2000

             game_over_text()
             game_over_sound.stop()
             break

         enemyX[i] += enemyX_change[i]
         if enemyX[i] <= 0:
             enemyX_change[i] = 3
             enemyY[i] += enemyY_change[i]
         elif enemyX[i] >= 736:
             enemyX_change[i] = -3
             enemyY[i] += enemyY_change[i]

         # collision
         collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY)
         if collision:
             collision_sound = mixer.Sound("explosion.wav")
             collision_sound.play()
             bulletY = 480
             bullet_state = "ready"
             score_value += 1
             enemyX[i] = random.randint(0, 736)
             enemyY[i] = random.randint(50, 200)

         enemy(enemyX[i], enemyY[i], i)

#bullet movement
     if bulletY <= 0:
        bulletY = 480
        bullet_state = "ready"

     if bullet_state is "Fire":
         fire_bullet(bulletX, bulletY)
         bulletY += bulletY_change


     player(playerX, playerY)
     show_score(textX, textY)
     pygame.display.update()


